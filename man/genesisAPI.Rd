% Generated by roxygen2 (4.0.2): do not edit by hand
\name{genesisAPI}
\alias{genesisAPI}
\alias{genesisDFtoXTS}
\alias{genesisXMLtoDF}
\title{API Destatis Genesis}
\usage{
genesisAPI(api.param = stop("'api.param' must be specified"),
  service = stop("'service' must be specified"), curl = NULL,
  query = FALSE)

genesisXMLtoDF(xml.list = stop("'xml.list' must be provided"))

genesisDFtoXTS(data = stop("'data' must be provided"))
}
\arguments{
\item{api.param}{a list with parameters used to construct the query, see example}

\item{service}{the webservice to use, e.g. \code{ExportService} or \code{RechercheService}}

\item{curl}{optional, \code{CURL} handle created with \code{RCurl::getCurlHandle()}}

\item{query}{logical, return the https query}

\item{xml.list}{a character string returned from}

\item{data}{a data frame created with \link{\code{genesisXMLtoDF}}}
}
\value{
The main function creates an URL with with the specified
parameters, retrieves the XML string and transforms into an R list.
Additional functions convert the returned list to data frame and xts objects.
}
\description{
Information retrieval from Destatis Genesis webservices
}
\details{
Retrieve information from Destatis Genesis \code{quader} in linearised XML format.
The retrieval function requires a premium \link{login https://www-genesis.destatis.de/genesis/online}
}
\examples{
api.param.datenexport <- list(
    method = "DatenExport",
    kennung = "GP103009",
    passwort = "STI004",
    ## namen = "81000BJ002",
    ## namen = "81000BJ105",
    namen = "81000BJ102",
    bereich = "oeffentlich",
    format = "csv",
    werte = "true",
    metadaten = "false",
    zusatz = "false",
    startjahr = "",
    endjahr = "",
    zeitscheiben = "",
    regionalschluessel = "",
    sachmerkmal = "",
    sachschluessel = "",
    stand = "01.01.2001",
    sprache = "de"
)

curl <- RCurl::getCurlHandle()
RCurl::curlSetOpt(.opts = list(proxy = "wsg-proxy.oecd.org:80"), curl = curl)

xml.list.datenexport <- genesisAPI(api.param = api.param.datenexport,
                                   service = "ExportService",
                                   curl = curl)

## convert to data frame
data.df <- genesisXMLtoDF(xml.list = xml.list.datenexport)

## convert to xts object, e.g. for use in \\code{dygraphs} package
data.xts <- genesisDFtoXTS(data = data.df)
}
\author{
Bo Werth <bo.werth@gmail.com>
}
\keyword{API}
\keyword{XML}

